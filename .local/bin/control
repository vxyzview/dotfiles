#!/bin/bash
#
# Copyright (C) 2024-02 pyranix <pyranix@proton.me>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# see http://www.apache.org/licenses/LICENSE-2.0 for details.

# Default constants
readonly NOTIFY_ID=424242
readonly STACK_TAG="progress"
readonly CONFIG_FILE="$HOME/.config/notifyctl.conf"
readonly LOG_FILE="$HOME/.notifyctl.log"
readonly DEFAULT_ICON_DIR="$HOME/.notify/images"
readonly DEFAULT_STEP=5
readonly DEFAULT_MAX=100

# Default icons
declare -A ICONS=(
    ["volume"]="$DEFAULT_ICON_DIR/music.png"
    ["mute"]="$DEFAULT_ICON_DIR/mute.png"
    ["unmute"]="$DEFAULT_ICON_DIR/music.png"
    ["brightness"]="$DEFAULT_ICON_DIR/smart-bulb.png"
)

# Load configuration file if it exists
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        while IFS='=' read -r key value; do
            [[ -z "$key" || "$key" =~ ^# ]] && continue
            key=$(echo "$key" | tr -d '[:space:]')
            value=$(echo "$value" | tr -d '[:space:]')
            case "$key" in
                STEP) STEP="$value" ;;
                MAX)  MAX="$value" ;;
                ICON_*) ICONS["${key#ICON_}"]="$value" ;;
            esac
        done < "$CONFIG_FILE"
    fi
    STEP=${STEP:-$DEFAULT_STEP}
    MAX=${MAX:-$DEFAULT_MAX}
}

# Log actions
log_action() {
    local message="$1"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $message" >> "$LOG_FILE"
}

# Check dependencies
check_deps() {
    local deps=("brightnessctl" "pactl" "dunstify")
    for dep in "${deps[@]}"; do
        command -v "$dep" >/dev/null 2>&1 || { echo "Error: $dep is required."; exit 1; }
    done
}

# Show notification
show_notification() {
    local title="$1" message="$2" value="$3" icon_key="$4"
    local icon="${ICONS[$icon_key]}"
    [[ ! -f "$icon" ]] && icon=""
    [[ -z "$value" ]] && value=0
    dunstify -u low -i "$icon" -r "$NOTIFY_ID" -h "int:value:$value" \
             -h "string:x-dunst-stack-tag:$STACK_TAG" "$title" "$message"
}

# Get current levels
get_brightness() {
    local cur=$(brightnessctl g 2>/dev/null) max=$(brightnessctl m 2>/dev/null)
    [[ -z "$cur" || -z "$max" ]] && { echo "Error: Failed to get brightness."; exit 1; }
    echo $(( (cur * 100) / max ))
}

get_volume() {
    local vol=$(pactl list sinks | awk '/Volume:/{print $5; exit}' | tr -d '%')
    [[ -z "$vol" ]] && { echo "Error: Failed to get volume."; exit 1; }
    echo "$vol"
}

# Validate and normalize value
normalize_value() {
    local value="$1" current="$2"
    [[ "$value" =~ ^[-+]?[0-9]+%?$ ]] || { echo "Error: Invalid value: $value"; exit 1; }
    value="${value%\%}"
    local result
    case "$value" in
        +*) result=$((current + ${value#+})) ;;
        -*) result=$((current - ${value#-})) ;;
        *)  result="$value" ;;
    esac
    [[ "$result" -lt 0 ]] && result=0
    [[ "$result" -gt "$MAX" ]] && result="$MAX"
    echo "$result"
}

# Change brightness
change_brightness() {
    local value="$1" dry_run="$2"
    local current=$(get_brightness)
    value=$(normalize_value "$value" "$current")
    if [[ "$dry_run" == "true" ]]; then
        log_action "Dry-run: Would set brightness to $value%"
        show_notification "Brightness (Dry)" "Would be: ${value}%" "$value" "brightness"
    else
        brightnessctl s "$value%" >/dev/null 2>&1 || { echo "Error: Brightness adjustment failed."; exit 1; }
        log_action "Set brightness to $value%"
        show_notification "Brightness" "Current: ${value}%" "$value" "brightness"
    fi
}

# Change volume
change_volume() {
    local value="$1" dry_run="$2"
    local current=$(get_volume)
    value=$(normalize_value "$value" "$current")
    if [[ "$dry_run" == "true" ]]; then
        log_action "Dry-run: Would set volume to $value%"
        show_notification "Volume (Dry)" "Would be: ${value}%" "$value" "volume"
    else
        pactl set-sink-volume @DEFAULT_SINK@ "$value%" || { echo "Error: Volume adjustment failed."; exit 1; }
        log_action "Set volume to $value%"
        show_notification "Volume" "Current: ${value}%" "$value" "volume"
    fi
}

# Toggle mute
toggle_mute() {
    local dry_run="$1"
    if [[ "$dry_run" == "true" ]]; then
        local muted=$(pactl list sinks | awk '/Mute:/{print $2; exit}')
        local action="unmute" icon="unmute"
        [[ "$muted" == "yes" ]] && action="mute" && icon="mute"
        log_action "Dry-run: Would $action audio"
        show_notification "Control (Dry)" "Would be: ${action}d" "" "$icon"
    else
        pactl set-sink-mute @DEFAULT_SINK@ toggle || { echo "Error: Mute toggle failed."; exit 1; }
        local muted=$(pactl list sinks | awk '/Mute:/{print $2; exit}')
        if [[ "$muted" == "yes" ]]; then
            log_action "Muted audio"
            show_notification "Control" "Muted" "" "mute"
        else
            log_action "Unmuted audio"
            show_notification "Control" "Unmuted" "" "unmute"
        fi
    fi
}

# Step adjustment
step_adjust() {
    local type="$1" direction="$2" step="${3:-$STEP}" dry_run="$4"
    local sign="+" current
    [[ "$direction" == "down" ]] && sign="-"
    case "$type" in
        brightness) current=$(get_brightness); change_brightness "${sign}${step}" "$dry_run" ;;
        volume)     current=$(get_volume); change_volume "${sign}${step}" "$dry_run" ;;
        *)          echo "Error: Unknown type: $type"; exit 1 ;;
    esac
}

# Show current status
show_status() {
    local bright=$(get_brightness)
    local vol=$(get_volume)
    local muted=$(pactl list sinks | awk '/Mute:/{print $2; exit}')
    echo "Brightness: ${bright}%"
    echo "Volume: ${vol}%"
    echo "Mute: $muted"
}

# Help menu
show_help() {
    cat << EOF
Usage: $0 [options] <command> [value]
Options:
  --dry-run    Simulate actions without applying changes
Commands:
  brightness <value>    Set brightness (e.g., 50%, +10%, -5%)
  volume <value>        Set volume (e.g., 50%, +10%, -5%)
  mute                  Toggle mute/unmute
  bright-up [step]      Increase brightness (default: $STEP%)
  bright-down [step]    Decrease brightness (default: $STEP%)
  vol-up [step]         Increase volume (default: $STEP%)
  vol-down [step]       Decrease volume (default: $STEP%)
  status                Show current brightness, volume, and mute status
  help                  Show this help
Config: $CONFIG_FILE (optional)
  STEP=<value>         Default step size
  MAX=<value>          Maximum value (default: 100)
  ICON_<key>=<path>    Custom icon paths (e.g., ICON_volume=/path/to/icon.png)
EOF
    exit 0
}

# Main logic
main() {
    load_config
    check_deps
    local dry_run="false"
    [[ "$1" == "--dry-run" ]] && { dry_run="true"; shift; }

    [[ "$#" -lt 1 ]] && show_help

    case "$1" in
        brightness) [[ "$#" -ne 2 ]] && show_help; change_brightness "$2" "$dry_run" ;;
        volume)     [[ "$#" -ne 2 ]] && show_help; change_volume "$2" "$dry_run" ;;
        mute)       [[ "$#" -ne 1 ]] && show_help; toggle_mute "$dry_run" ;;
        bright-up)  step_adjust "brightness" "up" "$2" "$dry_run" ;;
        bright-down) step_adjust "brightness" "down" "$2" "$dry_run" ;;
        vol-up)     step_adjust "volume" "up" "$2" "$dry_run" ;;
        vol-down)   step_adjust "volume" "down" "$2" "$dry_run" ;;
        status)     show_status ;;
        help)       show_help ;;
        *)          echo "Error: Unknown command: $1"; show_help ;;
    esac
}

main "$@"
exit 0
