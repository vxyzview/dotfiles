#!/bin/bash
#
# Advanced Wallpaper Manager
# Copyright (C) 2024-02 pyranix <pyranix@proton.me>
# Licensed under the Apache License, Version 2.0
# See http://www.apache.org/licenses/LICENSE-2.0 for details

# Default configuration
CONFIG_FILE="${HOME}/.config/wallpaper_mgr.conf"
WALLPAPER_DIR="${HOME}/.wallpapers"
DEFAULT_WALLPAPER="${WALLPAPER_DIR}/default.jpg"
NOTIFY_ICON="${HOME}/.notify/images/wallpaper.png"
CURRENT_WALLPAPER_FILE="${HOME}/.current_wallpaper"
SCALE_MODE="fill"  # Default scaling mode: fill, scale, center, tile, max

# Colors for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

# Load configuration file if it exists
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    fi
}

# Check for required dependencies
check_deps() {
    local deps=("rofi" "feh" "dunstify")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            echo -e "${RED}Error: $dep is not installed. Please install it.${NC}"
            exit 1
        fi
    done
}

# Ensure wallpaper directory exists
check_dir() {
    if [ ! -d "$WALLPAPER_DIR" ]; then
        echo -e "${RED}Error: Wallpaper directory not found: $WALLPAPER_DIR${NC}"
        exit 1
    fi
}

# Get list of image files recursively
get_wallpapers() {
    find "$WALLPAPER_DIR" -type f \( -iname "*.jpg" -o -iname "*.png" -o -iname "*.jpeg" \) -exec realpath --relative-to="$WALLPAPER_DIR" {} \;
}

# Preview wallpaper (temporary display)
preview_wallpaper() {
    local wallpaper="$1"
    feh --bg-"$SCALE_MODE" "$wallpaper" &
    local pid=$!
    sleep 2
    kill "$pid" 2>/dev/null
}

# Set wallpaper with feh
set_wallpaper() {
    local wallpaper="$1"
    local mode="${2:-$SCALE_MODE}"
    local bg_opt

    case "$mode" in
        fill) bg_opt="--bg-fill" ;;
        scale) bg_opt="--bg-scale" ;;
        center) bg_opt="--bg-center" ;;
        tile) bg_opt="--bg-tile" ;;
        max) bg_opt="--bg-max" ;;
        *) echo -e "${RED}Error: Invalid scale mode: $mode${NC}"; return 1 ;;
    esac

    if feh "$bg_opt" "$wallpaper" 2>/dev/null; then
        echo "$wallpaper" > "$CURRENT_WALLPAPER_FILE"
        dunstify -i "$NOTIFY_ICON" "Wallpaper set to '$(basename "$wallpaper")' ($mode)"
        echo -e "${GREEN}Wallpaper set: $wallpaper ($mode)${NC}"
    else
        echo -e "${RED}Error: Failed to set wallpaper: $wallpaper${NC}"
        dunstify -i "$NOTIFY_ICON" "Error setting '$(basename "$wallpaper")'"
        return 1
    fi
}

# Main logic
main() {
    load_config
    check_deps
    check_dir

    # Menu options
    local options=(
        "Random"
        "Restore Last"
        "Change Scale Mode"
        "Preview Mode"
        "$(get_wallpapers)"
    )
    local selected
    selected=$(printf '%s\n' "${options[@]}" | rofi -dmenu -p "Wallpaper Manager:")

    case "$selected" in
        "Random")
            local wallpapers=($(get_wallpapers))
            if [ ${#wallpapers[@]} -eq 0 ]; then
                echo -e "${RED}Error: No wallpapers found in $WALLPAPER_DIR${NC}"
                exit 1
            fi
            local random_wp="${WALLPAPER_DIR}/${wallpapers[RANDOM % ${#wallpapers[@]}]}"
            set_wallpaper "$random_wp"
            ;;
        "Restore Last")
            if [ -f "$CURRENT_WALLPAPER_FILE" ] && [ -r "$CURRENT_WALLPAPER_FILE" ]; then
                local last_wp
                read -r last_wp < "$CURRENT_WALLPAPER_FILE"
                if [ -f "$last_wp" ]; then
                    set_wallpaper "$last_wp"
                else
                    echo -e "${RED}Error: Last wallpaper not found: $last_wp${NC}"
                    set_wallpaper "$DEFAULT_WALLPAPER"
                fi
            else
                echo -e "${RED}Error: No previous wallpaper recorded${NC}"
                set_wallpaper "$DEFAULT_WALLPAPER"
            fi
            ;;
        "Change Scale Mode")
            local modes=("fill" "scale" "center" "tile" "max")
            local new_mode
            new_mode=$(printf '%s\n' "${modes[@]}" | rofi -dmenu -p "Select Scale Mode:")
            if [[ " ${modes[*]} " =~ " $new_mode " ]]; then
                SCALE_MODE="$new_mode"
                echo "SCALE_MODE=$new_mode" >> "$CONFIG_FILE"  # Persist change
                dunstify -i "$NOTIFY_ICON" "Scale mode set to '$new_mode'"
                if [ -f "$CURRENT_WALLPAPER_FILE" ]; then
                    set_wallpaper "$(cat "$CURRENT_WALLPAPER_FILE")" "$new_mode"
                fi
            fi
            ;;
        "Preview Mode")
            local preview_wp
            preview_wp=$(get_wallpapers | rofi -dmenu -p "Select Wallpaper to Preview:")
            if [ -n "$preview_wp" ]; then
                preview_wallpaper "${WALLPAPER_DIR}/${preview_wp}"
                local confirm
                confirm=$(echo -e "Yes\nNo" | rofi -dmenu -p "Set as wallpaper?")
                if [ "$confirm" = "Yes" ]; then
                    set_wallpaper "${WALLPAPER_DIR}/${preview_wp}"
                fi
            fi
            ;;
        "")
            dunstify -i "$NOTIFY_ICON" "No action selected"
            if [ -f "$DEFAULT_WALLPAPER" ]; then
                set_wallpaper "$DEFAULT_WALLPAPER"
            fi
            ;;
        *)
            local full_path="${WALLPAPER_DIR}/${selected}"
            if [ -f "$full_path" ]; then
                set_wallpaper "$full_path"
            else
                echo -e "${RED}Error: Invalid selection: $selected${NC}"
                exit 1
            fi
            ;;
    esac
}

# Run the script
main
exit 0
