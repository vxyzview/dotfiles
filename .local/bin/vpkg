#!/bin/bash
#
# vpkg-setup - A tool for managing Void Linux packages from source
# 

set -e  # Exit immediately if a command exits with non-zero status

# Define colors for better readability
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Define the directory where the void-packages repo will be cloned
VP_DIR="$HOME/.vpkg"
VP_COMMAND="/usr/local/bin/vpkg"

# Print banner
echo -e "${BLUE}${BOLD}"
echo "┌─────────────────────────────────────────────┐"
echo "│          VPKG Setup and Installation        │"
echo "│     Void Linux Package Builder Utility      │"
echo "└─────────────────────────────────────────────┘"
echo -e "${NC}"

# Check for required commands
for cmd in git xbps-install sudo; do
    if ! command -v $cmd &> /dev/null; then
        echo -e "${RED}Error: $cmd is not installed. Please install it first.${NC}"
        exit 1
    fi
done

# Function to show progress
show_progress() {
    echo -e "${BLUE}==> ${BOLD}$1${NC}"
}

# Repository setup
setup_repository() {
    show_progress "Setting up void-packages repository"
    
    if [ ! -d "$VP_DIR" ]; then
        echo -e "${YELLOW}Cloning the void-packages repository...${NC}"
        git clone --depth=1 https://github.com/void-linux/void-packages "$VP_DIR"
    else
        echo -e "${YELLOW}The repository already exists. Updating...${NC}"
        cd "$VP_DIR"
        git pull origin master
    fi
    
    cd "$VP_DIR"
    
    # Run the binary bootstrap if needed
    if [ ! -d "$VP_DIR/masterdir" ]; then
        show_progress "Running binary-bootstrap..."
        ./xbps-src binary-bootstrap
    fi
    
    # Configure XBPS to allow restricted packages if not already configured
    if ! grep -q "XBPS_ALLOW_RESTRICTED=yes" etc/conf 2>/dev/null; then
        show_progress "Enabling restricted packages..."
        echo "XBPS_ALLOW_RESTRICTED=yes" >> etc/conf
    fi
}

# Install the vpkg command
install_vpkg_command() {
    show_progress "Creating vpkg command"
    
    cat << 'EOF' | sudo tee $VP_COMMAND > /dev/null
#!/bin/bash
#
# vpkg - A utility to build and install Void Linux packages from source
#

set -e

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Define the directory where the void-packages repo is cloned
VP_DIR="$HOME/.vpkg"

# Function to show usage
show_usage() {
    echo -e "${BOLD}USAGE:${NC}"
    echo "  vpkg <command> [options]"
    echo
    echo -e "${BOLD}COMMANDS:${NC}"
    echo "  build <package>      Build a package but don't install it"
    echo "  install <package>    Build and install a package"
    echo "  update               Update the void-packages repository"
    echo "  search <term>        Search for packages matching the term"
    echo "  help                 Show this help message"
    echo
    echo -e "${BOLD}EXAMPLES:${NC}"
    echo "  vpkg install firefox      # Build and install firefox"
    echo "  vpkg search text-editor   # Search for text editors"
    echo "  vpkg update               # Update the repository"
}

# Ensure we're in the void-packages directory
cd "$VP_DIR" || { echo -e "${RED}Error: Could not find the void-packages directory at $VP_DIR${NC}"; exit 1; }

# Check for the first argument
if [ -z "$1" ]; then
    show_usage
    exit 1
fi

# Process commands
case "$1" in
    build)
        if [ -z "$2" ]; then
            echo -e "${RED}Error: Please specify a package to build${NC}"
            exit 1
        fi
        echo -e "${BLUE}==> ${BOLD}Building package: $2${NC}"
        ./xbps-src pkg "$2"
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}Package built successfully. To install, run: vpkg install $2${NC}"
        fi
        ;;
        
    install)
        if [ -z "$2" ]; then
            echo -e "${RED}Error: Please specify a package to install${NC}"
            exit 1
        fi
        
        PACKAGE_NAME="$2"
        echo -e "${BLUE}==> ${BOLD}Building and installing: $PACKAGE_NAME${NC}"
        
        # Build the package
        ./xbps-src pkg "$PACKAGE_NAME"
        
        # Find all possible package directories
        POSSIBLE_PATHS=(
            "hostdir/binpkgs"
            "hostdir/binpkgs/nonfree"
            "hostdir/binpkgs/multilib"
            "hostdir/binpkgs/multilib/nonfree"
            "hostdir/binpkgs/debug"
        )
        
        # Find the actual package file
        PACKAGE_PATH=""
        for path in "${POSSIBLE_PATHS[@]}"; do
            if ls "$path"/*"$PACKAGE_NAME"*.xbps 1> /dev/null 2>&1; then
                PACKAGE_PATH="$path"
                break
            fi
        done
        
        if [ -z "$PACKAGE_PATH" ]; then
            echo -e "${RED}Error: Could not find the built package.${NC}"
            exit 1
        fi
        
        # Install the package
        echo -e "${YELLOW}Installing from repository: $PACKAGE_PATH${NC}"
        sudo xbps-install --repository="$VP_DIR/$PACKAGE_PATH" --yes "$PACKAGE_NAME"
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}Package $PACKAGE_NAME installed successfully.${NC}"
        else
            echo -e "${RED}Failed to install package: $PACKAGE_NAME${NC}"
            exit 1
        fi
        ;;
        
    update)
        echo -e "${BLUE}==> ${BOLD}Updating void-packages repository${NC}"
        git pull origin master
        echo -e "${GREEN}Repository updated successfully.${NC}"
        ;;
        
    search)
        if [ -z "$2" ]; then
            echo -e "${RED}Error: Please specify a search term${NC}"
            exit 1
        fi
        
        echo -e "${BLUE}==> ${BOLD}Searching for: $2${NC}"
        find srcpkgs -maxdepth 1 -type d -name "*$2*" | sed 's/srcpkgs\///'
        ;;
        
    help)
        show_usage
        ;;
        
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        show_usage
        exit 1
        ;;
esac
EOF

    sudo chmod +x $VP_COMMAND
    
    # Create a completion script for vpkg
    COMPLETION_DIR="/usr/share/bash-completion/completions"
    if [ -d "$COMPLETION_DIR" ]; then
        show_progress "Creating bash completion for vpkg"
        sudo tee "$COMPLETION_DIR/vpkg" > /dev/null << 'EOF'
# vpkg bash completion

_vpkg() {
    local cur prev opts cmds
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    cmds="build install update search help"

    # If previous word is vpkg, suggest commands
    if [ $COMP_CWORD -eq 1 ]; then
        COMPREPLY=( $(compgen -W "${cmds}" -- ${cur}) )
        return 0
    fi

    # Complete package names for build and install
    case "${prev}" in
        build|install)
            if [ -d "$HOME/.vpkg/srcpkgs" ]; then
                COMPREPLY=( $(compgen -W "$(find $HOME/.vpkg/srcpkgs -maxdepth 1 -type d | sed 's/.*srcpkgs\///' | grep -v '^$')" -- ${cur}) )
                return 0
            fi
            ;;
        *)
            ;;
    esac
}

complete -F _vpkg vpkg
EOF
    fi
}

# Main execution starts here
setup_repository
install_vpkg_command

echo -e "${GREEN}${BOLD}vpkg has been successfully installed!${NC}"
echo -e "${YELLOW}You can now use the following commands:${NC}"
echo -e "  ${BOLD}vpkg install <package>${NC} - Build and install a package"
echo -e "  ${BOLD}vpkg build <package>${NC}   - Build a package without installing"
echo -e "  ${BOLD}vpkg update${NC}            - Update the void-packages repository"
echo -e "  ${BOLD}vpkg search <term>${NC}     - Search for available packages"
echo -e "  ${BOLD}vpkg help${NC}              - Show usage information"
