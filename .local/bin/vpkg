#!/bin/bash

# Ultimate Void Linux package builder setup script

# Constants
DEFAULT_VP_DIR="$HOME/.vpkg"
readonly VP_COMMAND="/usr/local/bin/vpkg"
readonly REPO_URL="https://github.com/void-linux/void-packages"
readonly LOG_DIR="$HOME/.vpkg-logs"
readonly CONFIG_FILE="$HOME/.vpkgrc"
readonly API_URL="https://api.github.com/repos/void-linux/void-packages/contents/srcpkgs"

# Colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[1;34m'
readonly NC='\033[0m'

# Functions
error_exit() {
    printf "${RED}Error: %s${NC}\n" "$1" >&2
    log "ERROR: $1"
    exit 1
}

success() {
    printf "${GREEN}%s${NC}\n" "$1"
    log "SUCCESS: $1"
}

warn() {
    printf "${YELLOW}Warning: %s${NC}\n" "$1"
    log "WARN: $1"
}

info() {
    printf "${BLUE}Info: %s${NC}\n" "$1"
    log "INFO: $1"
}

log() {
    local log_file="$LOG_DIR/vpkg-$(date +%Y%m%d-%H%M%S).log"
    mkdir -p "$LOG_DIR" || warn "Failed to create log directory."
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$log_file" 2>/dev/null || warn "Failed to write to log."
}

check_deps() {
    local deps=(git xbps-install sudo curl jq pv)
    for dep in "${deps[@]}"; do
        command -v "$dep" >/dev/null 2>&1 || error_exit "$dep is required but not installed."
    done
}

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
        info "Loaded configuration from $CONFIG_FILE."
    else
        echo "VERBOSE=0" > "$CONFIG_FILE"
        echo "CLEAN=0" >> "$CONFIG_FILE"
        echo "VP_DIR=$DEFAULT_VP_DIR" >> "$CONFIG_FILE"
        info "Created default configuration at $CONFIG_FILE."
    fi
}

check_package_availability() {
    local pkg="$1"
    info "Checking if $pkg exists in void-packages..."
    if curl -s -H "Accept: application/vnd.github.v3+json" "$API_URL/$pkg" | jq -e '.type == "dir"' > /dev/null; then
        success "$pkg is available in the repository."
        return 0
    else
        error_exit "$pkg not found in void-packages repository."
    fi
}

setup_repo() {
    VP_DIR="${VP_DIR:-$DEFAULT_VP_DIR}"
    if [ ! -d "$VP_DIR" ]; then
        info "Cloning void-packages repository into $VP_DIR..."
        git clone --depth=1 "$REPO_URL" "$VP_DIR" || error_exit "Failed to clone repository."
        log "Cloned void-packages repository to $VP_DIR."
    else
        info "$VP_DIR already exists. Skipping clone."
    fi

    cd "$VP_DIR" || error_exit "Failed to navigate to $VP_DIR."

    info "Running binary-bootstrap..."
    ./xbps-src binary-bootstrap || error_exit "Binary bootstrap failed."
    log "Completed binary-bootstrap."

    info "Enabling restricted packages..."
    echo "XBPS_ALLOW_RESTRICTED=yes" >> etc/conf || error_exit "Failed to configure XBPS."
    log "Enabled restricted packages."
}

create_vpkg_command() {
    cat << 'EOF' | sudo tee "$VP_COMMAND" > /dev/null || error_exit "Failed to create $VP_COMMAND."
#!/bin/bash

# Ultimate Void package builder and installer

CONFIG_FILE="$HOME/.vpkgrc"
VP_DIR="${VP_DIR:-$HOME/.vpkg}"
LOG_DIR="$HOME/.vpkg-logs"
API_URL="https://api.github.com/repos/void-linux/void-packages/contents/srcpkgs"
VERBOSE=0
CLEAN=0
DRY_RUN=0
FORCE=0
CHECK_AVAIL=1

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
NC='\033[0m'

error_exit() {
    printf "${RED}Error: %s${NC}\n" "$1" >&2
    log "ERROR: $1"
    exit 1
}

success() {
    printf "${GREEN}%s${NC}\n" "$1"
    log "SUCCESS: $1"
}

warn() {
    printf "${YELLOW}Warning: %s${NC}\n" "$1"
    log "WARN: $1"
}

info() {
    printf "${BLUE}Info: %s${NC}\n" "$1"
    log "INFO: $1"
}

log() {
    local log_file="$LOG_DIR/vpkg-$(date +%Y%m%d-%H%M%S).log"
    mkdir -p "$LOG_DIR" 2>/dev/null || warn "Failed to create log directory."
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$log_file" 2>/dev/null || warn "Failed to write to log."
}

load_config() {
    [ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE" || warn "No config file found at $CONFIG_FILE."
}

check_package_availability() {
    local pkg="$1"
    if [ "$CHECK_AVAIL" -eq 1 ]; then
        info "Checking if $pkg exists in void-packages..."
        if curl -s -H "Accept: application/vnd.github.v3+json" "$API_URL/$pkg" | jq -e '.type == "dir"' > /dev/null; then
            success "$pkg is available."
        else
            error_exit "$pkg not found in void-packages repository."
        fi
    fi
}

progress() {
    local cmd="$1"
    local msg="$2"
    if [ "$VERBOSE" -eq 1 ]; then
        echo "$msg"
        $cmd
    else
        echo -n "$msg "
        $cmd | pv -t -p -b -r -N "$msg" > /dev/null 2>&1 || error_exit "Command failed."
        echo "Done."
    fi
}

usage() {
    echo "Usage: vpkg [-v] [-c] [-d] [-f] [-n] <package_name>[@<version>]"
    echo "  -v: Verbose output (override config)"
    echo "  -c: Clean build artifacts after installation (override config)"
    echo "  -d: Dry run (simulate without installing)"
    echo "  -f: Force rebuild even if package exists"
    echo "  -n: Skip package availability check"
    echo "  Example: vpkg firefox@115.0.2 -vc"
    exit 1
}

# Load config
load_config

# Parse options
while getopts "vcdfn" opt; do
    case $opt in
        v) VERBOSE=1 ;;
        c) CLEAN=1 ;;
        d) DRY_RUN=1 ;;
        f) FORCE=1 ;;
        n) CHECK_AVAIL=0 ;;
        ?) usage ;;
    esac
done
shift $((OPTIND - 1))

[ -z "$1" ] && usage
PACKAGE_SPEC="$1"
PACKAGE_NAME="${PACKAGE_SPEC%%@*}"
PACKAGE_VERSION="${PACKAGE_SPEC#*@}"
[ "$PACKAGE_VERSION" = "$PACKAGE_SPEC" ] && unset PACKAGE_VERSION

# Navigate to void-packages dir
cd "$VP_DIR" || error_exit "Cannot navigate to $VP_DIR."

# Check package availability
check_package_availability "$PACKAGE_NAME"

# Check if package exists and force rebuild if specified
if [ -z "$FORCE" ] && [ -d "hostdir/binpkgs/$PACKAGE_NAME" ] && [ "$DRY_RUN" -eq 0 ]; then
    warn "Package $PACKAGE_NAME already built. Installing existing package."
    progress "sudo xbps-install --repository hostdir/binpkgs $PACKAGE_NAME" "Installing $PACKAGE_NAME..."
    success "Installed existing package $PACKAGE_NAME."
    exit 0
fi

# Build the package
BUILD_CMD="./xbps-src pkg $PACKAGE_NAME"
progress "$BUILD_CMD" "Building $PACKAGE_NAME${PACKAGE_VERSION:+@$PACKAGE_VERSION}..."

# Find package directory
PACKAGE_DIR=$(find hostdir/binpkgs -type d -name "$PACKAGE_NAME" -print -quit)
[ -z "$PACKAGE_DIR" ] && PACKAGE_DIR="hostdir/binpkgs"

# Simulate or install
if [ "$DRY_RUN" -eq 1 ]; then
    success "Dry run complete for $PACKAGE_NAME${PACKAGE_VERSION:+@$PACKAGE_VERSION}. No changes made."
else
    progress "sudo xbps-install --repository $PACKAGE_DIR $PACKAGE_NAME${PACKAGE_VERSION:+-$PACKAGE_VERSION}" \
        "Installing $PACKAGE_NAME${PACKAGE_VERSION:+@$PACKAGE_VERSION}..."
fi

# Clean up if requested
if [ "$CLEAN" -eq 1 ] && [ "$DRY_RUN" -eq 0 ]; then
    progress "./xbps-src clean $PACKAGE_NAME" "Cleaning up build artifacts..."
fi

success "Package $PACKAGE_NAME${PACKAGE_VERSION:+@$PACKAGE_VERSION} processed successfully."
EOF

    sudo chmod +x "$VP_COMMAND" || error_exit "Failed to make $VP_COMMAND executable."
    log "Created vpkg command at $VP_COMMAND."
}

# Main execution
info "Setting up ultimate Void package builder..."
log "Starting setup."

check_deps
load_config
setup_repo
create_vpkg_command

success "Setup complete! Use 'vpkg [-v] [-c] [-d] [-f] [-n] <package_name>[@<version>]'"
echo "  -v: Verbose, -c: Clean, -d: Dry run, -f: Force, -n: Skip availability check"
echo "  Config: $CONFIG_FILE, Logs: $LOG_DIR"
